</p>
    <% for(item of channel.conversation) { %>
        <div>
            <% if (item.userImage==='' || typeof(item.userImage==='undefined' ) ){%>
                <i class="far fa-user"></i>
            <%} else {%>
                <%= item.userImage %>
                <%=item.user %>
                <%= item.timestamp %>
                <%= item.message %><%}%>
                </div>
    <% } %>


    <div id="slack-chat">
    <h2>Chat and have fun!!!</h2>
    <div>
        <div id="chat_messages">


        </div>
        <form id="form">
            <input type="text" id="name" placeholder="Name">
            <input type="text" id="message" placeholder="Type your message here">
            <button>Send</button>
        </form>
    </div>
    <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Slack-Clone</title>
    <script src="https://kit.fontawesome.com/deedf13270.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="/styles/style.css">
    <link rel="icon" type="image/png" href="/images/favicon.png">
</head>
<body>
<div class="container">
 
  <%- include('block/channel', channels) -%>
  
  
</div>
<script src="/socket.io/socket.io.js"></script>
<script src="/scripts/script.js"></script>
</body>
</html>

app.js 
// --------------------------
//      DEPENDENCIES
//-----------------------
const express=require('express');
const socket=require('socket.io')
const path=require('path')
const mongoose=require('mongoose')

// const monk=require('monk')
const bodyParser = require('body-parser')

const app=express()
const server=app.listen(3000)
const io=socket(server) // opening socket connection
// const db=monk('localhost:27017/slack-clone')


app.use((req, res, next) => {
    req.db = db
    next()
})
app.use(express.static('public'));
app.use(bodyParser.urlencoded({extended: true}));
app.set("view engine", "ejs");
app.set('views', (__dirname, './views'));


// Routes
app.get('/login',(req,resp)=>{
    resp.render('login')
})
app.get('/',async(req,resp)=>{
    //get channelList from database 
//just for test
    let channel=   db.get('channels')
    let data=await channel.find({})
    console.log(data);
    resp.render('index',{channels:data})
    
})
//for individual channels  
app.get('/:id',async(req,resp)=>{
    let channels=   db.get('channels')
    let channels_data=await channels.find({})
    let channel_data=await channels.find({_id:req.params.id})
    // console.log(channel_data);
    resp.render('channelDetails', {channel:channel_data[0],channels:channels_data})

})
// post a new channel
app.get('/new/channel',(req,resp)=>{
    
})
//post a new message
app.post('new/message',(req,resp)=>{

})
//log when the user connects and disconnects
io.on('connection', socket=>{
    // socket.on('joinChannel',()=>{
        
        
        socket.emit('message','Welcome to Slack'); //emits only to the person connected 
        socket.broadcast.emit('message','A user has connected')//to all otherusers than the one connected
    // })
 
//  console.log(socket.request)
    
socket.on('chat',(data)=>{

    let channels=   db.get('channels');
    channels.find({})
    .then(data=>{console.log(data)})
    channels.update({_id:data.id},{$push:{"conversation":{message:data.message, user:data.name,timeStamp:new Date()}}})
    console.log(data)  
    io.emit('chat',data)
})
//runs when a user disconnects
  socket.on('disconnect',()=>{
    io.emit('message','A user has disconnected')
  })


})
app.js
mongoose// --------------------------
//      DEPENDENCIES
//-----------------------
const express=require('express');
const socket=require('socket.io')
const path=require('path')
const mongoose=require('mongoose')

const bodyParser = require('body-parser')

const app=express()
const server=app.listen(3000)
const io=socket(server) // opening socket connection


//set up default mongoose connection
mongoose.connect('mongodb://localhost:27017/slack-clone', {
 useNewUrlParser: true,
 useUnifiedTopology: true
});
// Get the default connection
const db=mongoose.connection;
//Bind connection to error event (to get notification of connection errors) 
db.on('error', console.error.bind(console, 'MongoDB connection error:'));

app.use(express.static('public'));
app.use(bodyParser.urlencoded({extended: true}));
app.set("view engine", "ejs");
app.set('views', (__dirname, './views'));

const ChannelModel=require('./models/channels')
// Routes
app.get('/login',(req,resp)=>{
    resp.render('login')
})
app.get('/',(req,resp)=>{
    //get channelList from database 
    ChannelModel.find({},(err,channel_list)=>{
            if(err) console.log('error')
            console.log(channel_list);
            resp.render('index',{channels:channel_list})
        })
    
    
    
})
//for individual channels  
app.get('/:id',async(req,resp)=>{
     await ChannelModel
        .find({})
        .exec((err,channel_list)=>{
            if(err) console.log('error')
            console.log(channel_list);
             ChannelModel
            .findById(req.params.id)
            .exec((err,channel)=>{
            if(err) console.log(err.statusCode)
            console.log(channel)
            resp.render('channelDetails', {channel,channels:channel_list})
        })
    })
})
// get form new channel
app.get('/new/channel',(req,resp)=>{
    resp.render('new_channel')
})
//post the new channel
app.post('new/channel',(req,resp)=>{
    const channelData=req.body
    console.log(channelData)
})
//log when the user connects and disconnects
io.on('connection', socket=>{
    // socket.on('joinChannel',()=>{
    socket.emit('message','Welcome to Slack'); //emits only to the person connected 
    socket.broadcast.emit('message','A user has connected')//to all other users 
    // })
 
//  console.log(socket.request)
    
socket.on('chat',(data)=>{

    ChannelModel.findByIdAndUpdate(data.id,
        { $push: 
            { conversation: 
                {message:data.message, user:data.name,timeStamp:new Date()} }},
                (err,messages)=>{
                     if(err) console.log(err.statusCode)
                     console.log(messages)
                }) 
    io.emit('chat',data)
})
//runs when a user disconnects
  socket.on('disconnect',()=>{
    io.emit('message','A user has disconnected')
  })


})