ul in earlier channel.ejs-------------------
<ul>
        <% for(let i=0; i < channels.length ; i++) { %>
            <li >
                <% if (channels[i].status==='public'){%> 
                    <i class="fas fa-hashtag"></i>
                <%}
                else {%>
                <i class="fas fa-lock"></i>
                <%}%>
               
                <a class="logout" href="/channels/<%=channels[i]._id%>"><%= channels[i].channelName %></a> 
            </li>
            <% } %>
           <li><a class="logout" href="/channels/new">Add channel <i class="fas fa-plus"></i></a> </li>

            
    </ul>
-----------------------------------------------------------------
app.js just before commit--- Add initial setup private chat-------------------
//set up express

const express=require('express');
const app=express()
const server=app.listen(3000)

// other dependencies

const expressEjsLayout = require('express-ejs-layouts')
const flash = require('connect-flash')
const mongoose=require('mongoose')
const path = require('path')
const passport=require('passport')
const session = require('express-session')
const socket=require('socket.io')

const indexRouter=require('./routes/index')
const usersRouter=require('./routes/users')
const channelsRouter=require('./routes/channels')

const ChannelModel=require('./models/channels')
const User=require('./models/users')

// opening socket connection
const io=socket(server) 


//set up default mongoose connection
mongoose.connect('mongodb://localhost:27017/slack-clone', {
 useNewUrlParser: true,
 useUnifiedTopology: true
});
// Get the default connection
const db=mongoose.connection;
//Bind connection to error event (to get notification of connection errors) 
db.on('error', console.error.bind(console, 'MongoDB connection error:'));

//middlewares
// app.use(express.static('public'));
app.use(express.urlencoded({extended: true}));
app.set("view engine", "ejs");
app.use(expressEjsLayout)
app.use(express.urlencoded({ extended: false }))
app.use(express.static(path.join(__dirname, 'public')));

//session middleware

app.use(session({
    secret:'secret',
    resave:true,
    saveUninitialized:true
}))
//passport
app.use(passport.initialize())
    app.use(passport.session())

// flash
//connect flash
app.use(flash())
// creating global variables
app.use((req, resp, next) => {
    resp.locals.success_msg = req.flash('success_msg')
    resp.locals.error_msg = req.flash('error_msg')
    resp.locals.error = req.flash('error')
    next()
})

//Routes
app.use('/',indexRouter)
app.use('/users',usersRouter)
app.use('/channels',channelsRouter)


// socket
// log when the user connects and disconnects
let person={}
io.on('connection', socket=>{
    
     socket.on('join',async(data)=>{
        socket.emit('message',`Hi ${data.name} Welcome to slack`); //emits only to the person connected 
        socket.broadcast.emit('message',` ${data.name} has connected`)//to all other users 
        socket.join(data.room)
        //  io.emit('join',data)
        //check if required----------
        // let channelId=data.id
        // let user=await User.findOne({name:data.name})
        // console.log(user)
        // //  console.log(data.name)
        //  console.log(socket.id)
        //  person[socket.id]={user}        //    person[data.name]=socket.id
        
           

     })
     //socket for chat    
socket.on('chat',(data)=>{
    
    ChannelModel.findByIdAndUpdate(data.id,
        { $push: 
            { conversation: 
                {message:data.message, user:data.name,timeStamp:new Date()} }},
                (err,messages)=>{
                     if(err) console.log(err.statusCode)
                     console.log(messages)
                }) 
    
    io.to(data.room).emit('chat',data)
    
})
     
     //trial to fix private chat
     //starting socket for a private chat
        socket.on('private_chat',  (data)=>{
            console.log(data.sender)
            console.log(data.receiver)
            //getting user details from database
            User.findOne({name:data.sender})
                .then(sender=>{
                    console.log('sender id'+ sender._id) 
                   User.findOne({name:data.receiver}) // for that user getting receiver details from database
                   .then(receiver=>{
                       console.log('receiver id'+receiver._id)
                        if(sender._id!= receiver.id){
                        // check if the channel already exists
                            ChannelModel.findOne({users: {$all: [sender._id, receiver._id]}})
                                .then(private_channel=>{
                                    console.log(private_channel)
                                    if(!private_channel){
                                        let new_private_channel= new ChannelModel({
                                            channelName:`${sender.name}-${receiver.name}`,
                                            status:'private',
                                            users:[sender._id,receiver._id]
                                        })
                                        new_private_channel.save()
                                        .then(new_private_channel=>{
                                            console.log(new_private_channel)
                                            let url=new_private_channel._id
                                            socket.join(new_private_channel.channelName)
                                             io.to(socket.id).emit('new_private_channel',url)
                                        })
                                    }
                                    else{
                                        let url=private_channel._id
                                        io.to(socket.id).emit('new_private_channel',url)
                                    }
                                })
                        }
                    
                    })
                })
     })


//runs when a user disconnects
  socket.on('disconnect',()=>{
    io.emit('message','A user has disconnected')
  })
})
// ----------------------new trial------------------------
// const users=[]
// io.on('connection',socket=>{
//     socket.on('joinRoom',({username,room})=>{
//         const user=userJoin(socket.id,username,room)
//         console.log(user);
//             users.push(user)
//             socket.join(user.room)

//         socket.emit('message',`Hi ${username} Welcome to slack`)
//     //broadcast when a user connect
//     socket.broadcast.to(user.room).emit('message', ` ${user.username} has connected`)//to all other users 
//     })




//   socket.on('chat Msg',msg=>{
//         const user=getCurrentUser(socket.id)
//         console.log(user)
//         // io.to(user.room).emit('chat',formatMessage(user.username,msg))
//   })


// // runs when a user disconnects
//   socket.on('disconnect',()=>{
//       const user=userLeave(socket.id);
//       if(user){
//           io.to(user.room).emit('message',` ${user.username} has connected`)

//       }
//   })

// })



// function formatMessage(username,text){
//     return {
//         username,
//         text
//     }
// }

// //when a user joins
// function userJoin(id,username,room){
//     const user={id,username,room}
//     users.push(user)
//     return user
// }
// //get current user
// function getCurrentUser(id){
//     return users.find(user=> user.id==id)
// }

// // User leaves chat
// function userLeave(id) {
//   const index = users.findIndex(user => user.id === id);

//   if (index !== -1) {
//     return users.splice(index, 1)[0];
//   }
// }

// // Get room users
// function getRoomUsers(room) {
//   return users.filter(user => user.room === room);
// }

--------------------------------------------------------------------------------------------------------
script.js before commit Add initial setup private chat-------------------------

onst socket=io('http://localhost:3000/')
console.log(socket)
let form=document.getElementById('form');
let slack_chat=document.getElementById('slack-chat')
let container=document.getElementById('container')
let user_name=document.getElementById('name');
let channel=document.getElementById('channel')
let message=document.getElementById('message');
let chat_messages= document.getElementById('chat_messages');
let url_array=document.location.href.split('/')
// let user_list=document.getElementById("user_list")
// console.log(document.location.href)
let id=url_array[url_array.length-1];
// console.log(id)

//------------------------------------old trial-----------------------------

socket.emit('join',{
    name: user_name.value,
    id:id,
    room:channel.value

})
// socket.on('join',data=>{
//     let side_bar=document.getElementById('side_bar')
//     let online_user=document.createElement('p')
//     online_user.innerHTML=data.name
//     side_bar.appendChild(online_user)
// })
// ----------ehen user_list in channel ejs was an id-----
// user_list.addEventListener('click',(e)=>{
//     e.preventDefault();
//     console.log('hello')
//     reciever_name=e.target.innerHTML
//     console.log(target.innerHTML)
//     console.log(user_name.value)--------------------------
// ----------when i changed it to a class----------
let user_list=document.getElementsByClassName("user_list");
     for(let i=0;i<user_list.length;i++){
            user_list[i].addEventListener("click",(e)=>{
                e.preventDefault();
                receiver_name=e.target.innerHTML.trim()
                console.log(receiver_name)
                console.log(user_name.value)

//     slack_chat.remove();
//     // let private_chat_form=document.createElement('form')
//     let input=document.createElement('input')
//     input.type="text"
//     let button=document.createElement('button')
//     container.appendChild(input)
//     container.appendChild(button)
//     button.addEventListener('click',e=>{
//         e.preventDefault()
    socket.emit('private_chat',{
      receiver: receiver_name,
    sender:user_name.value,
    
    // msg:input.value
    
    })
// })
    })
}
// socket.on('private_chat',data=>{
//     let msg=document.createElement('p')
//     msg.innerHTML=data.msg
//     container.appendChild(msg)
    
// }
// )

form.addEventListener('submit',(e)=>{
e.preventDefault()
    if(/*user_name.value &&*/ message.value){
        // console.log(user_name.value)
        console.log(message.value)
        socket.emit('chat',{
        name:user_name.value,
        message:message.value,
        id:id,
        room:channel.value
        })
    }
// user_name.value='';
message.value='';
})
socket.on('chat',data=>{
let name_user=document.createElement('p');
let message_user=document.createElement('p');
name_user.innerHTML=data.name
message_user.innerHTML=data.message
chat_messages.appendChild(name_user);
chat_messages.appendChild(message_user);
chat_messages.scrollTop=chat_messages.scrollHeight

})
socket.on('message',(message)=>{
    console.log(message)
})
socket.on('new_private_channel',url=>{
    // console.log(new_private_channel)
    window.location.href=`/channels/${url}`
})

// -----------------new trial---------------------
// socket.emit('joinRoom',{
//     username:user_name.value,
//     id:id,
//     room:channel.value
// })
// socket.on('chat',msg=>{
//     console.log(msg)
// let name_user=document.createElement('p');
// let message_user=document.createElement('p');
// name_user.innerHTML=msg.username
// message_user.innerHTML=msg.text

// chat_messages.appendChild(message_user);
// chat_messages.scrollTop=chat_messages.scrollHeight
// })
// // event listener for submission of form
// form.addEventListener('submit',(e)=>{
// e.preventDefault()
// let msg=message.value
//     if(msg){
//         // console.log(user_name.value)
//         console.log(message.value)
//         socket.emit('chat Msg',msg)
        
//     }
// // user_name.value='';
// message.value='';
// })
// socket.on('message',(msg)=>{
//     console.log(msg)
// })
------------------------------------------------------------------------------


--------------------------------------------------------------------
---------------------------------------------------------------------------
Add at the end of the channel.ejs inside aside after ul for those who have signed in
 <% if (typeof usernames!='undefined'){%>
    <% for(user of usernames){%>
       
       <a href=""> <p><%=user %></p></a>
    
    <%}%>
    <%}%> 
    ---------------------------------------------------------------


</p>
    <% for(item of channel.conversation) { %>
        <div>
            <% if (item.userImage==='' || typeof(item.userImage==='undefined' ) ){%>
                <i class="far fa-user"></i>
            <%} else {%>
                <%= item.userImage %>
                <%=item.user %>
                <%= item.timestamp %>
                <%= item.message %><%}%>
                </div>
    <% } %>


    <div id="slack-chat">
    <h2>Chat and have fun!!!</h2>
    <div>
        <div id="chat_messages">


        </div>
        <form id="form">
            <input type="text" id="name" placeholder="Name">
            <input type="text" id="message" placeholder="Type your message here">
            <button>Send</button>
        </form>
    </div>
    
    
    
    <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Slack-Clone</title>
    <script src="https://kit.fontawesome.com/deedf13270.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="/styles/style.css">
    <link rel="icon" type="image/png" href="/images/favicon.png">
</head>
<body>
<div class="container">
 
  <%- include('block/channel', channels) -%>
  
  
</div>
<script src="/socket.io/socket.io.js"></script>
<script src="/scripts/script.js"></script>
</body>
</html>

app.js 
// --------------------------
//      DEPENDENCIES
//-----------------------
const express=require('express');
const socket=require('socket.io')
const path=require('path')
const mongoose=require('mongoose')

// const monk=require('monk')
const bodyParser = require('body-parser')

const app=express()
const server=app.listen(3000)
const io=socket(server) // opening socket connection
// const db=monk('localhost:27017/slack-clone')


app.use((req, res, next) => {
    req.db = db
    next()
})
app.use(express.static('public'));
app.use(bodyParser.urlencoded({extended: true}));
app.set("view engine", "ejs");
app.set('views', (__dirname, './views'));


// Routes
app.get('/login',(req,resp)=>{
    resp.render('login')
})
app.get('/',async(req,resp)=>{
    //get channelList from database 
//just for test
    let channel=   db.get('channels')
    let data=await channel.find({})
    console.log(data);
    resp.render('index',{channels:data})
    
})
//for individual channels  
app.get('/:id',async(req,resp)=>{
    let channels=   db.get('channels')
    let channels_data=await channels.find({})
    let channel_data=await channels.find({_id:req.params.id})
    // console.log(channel_data);
    resp.render('channelDetails', {channel:channel_data[0],channels:channels_data})

})
// post a new channel
app.get('/new/channel',(req,resp)=>{
    
})
//post a new message
app.post('new/message',(req,resp)=>{

})
//log when the user connects and disconnects
io.on('connection', socket=>{
    // socket.on('joinChannel',()=>{
        
        
        socket.emit('message','Welcome to Slack'); //emits only to the person connected 
        socket.broadcast.emit('message','A user has connected')//to all otherusers than the one connected
    // })
 
//  console.log(socket.request)
    
socket.on('chat',(data)=>{

    let channels=   db.get('channels');
    channels.find({})
    .then(data=>{console.log(data)})
    channels.update({_id:data.id},{$push:{"conversation":{message:data.message, user:data.name,timeStamp:new Date()}}})
    console.log(data)  
    io.emit('chat',data)
})
//runs when a user disconnects
  socket.on('disconnect',()=>{
    io.emit('message','A user has disconnected')
  })


})
app.js
mongoose// --------------------------
//      DEPENDENCIES
//-----------------------
const express=require('express');
const socket=require('socket.io')
const path=require('path')
const mongoose=require('mongoose')

const bodyParser = require('body-parser')

const app=express()
const server=app.listen(3000)
const io=socket(server) // opening socket connection


//set up default mongoose connection
mongoose.connect('mongodb://localhost:27017/slack-clone', {
 useNewUrlParser: true,
 useUnifiedTopology: true
});
// Get the default connection
const db=mongoose.connection;
//Bind connection to error event (to get notification of connection errors) 
db.on('error', console.error.bind(console, 'MongoDB connection error:'));

app.use(express.static('public'));
app.use(bodyParser.urlencoded({extended: true}));
app.set("view engine", "ejs");
app.set('views', (__dirname, './views'));

const ChannelModel=require('./models/channels')
// Routes
app.get('/login',(req,resp)=>{
    resp.render('login')
})
app.get('/',(req,resp)=>{
    //get channelList from database 
    ChannelModel.find({},(err,channel_list)=>{
            if(err) console.log('error')
            console.log(channel_list);
            resp.render('index',{channels:channel_list})
        })
    
    
    
})
//for individual channels  
app.get('/:id',async(req,resp)=>{
     await ChannelModel
        .find({})
        .exec((err,channel_list)=>{
            if(err) console.log('error')
            console.log(channel_list);
             ChannelModel
            .findById(req.params.id)
            .exec((err,channel)=>{
            if(err) console.log(err.statusCode)
            console.log(channel)
            resp.render('channelDetails', {channel,channels:channel_list})
        })
    })
})
// get form new channel
app.get('/new/channel',(req,resp)=>{
    resp.render('new_channel')
})
//post the new channel
app.post('new/channel',(req,resp)=>{
    const channelData=req.body
    console.log(channelData)
})
//log when the user connects and disconnects
io.on('connection', socket=>{
    // socket.on('joinChannel',()=>{
    socket.emit('message','Welcome to Slack'); //emits only to the person connected 
    socket.broadcast.emit('message','A user has connected')//to all other users 
    // })
 
//  console.log(socket.request)
    
socket.on('chat',(data)=>{

    ChannelModel.findByIdAndUpdate(data.id,
        { $push: 
            { conversation: 
                {message:data.message, user:data.name,timeStamp:new Date()} }},
                (err,messages)=>{
                     if(err) console.log(err.statusCode)
                     console.log(messages)
                }) 
    io.emit('chat',data)
})
//runs when a user disconnects
  socket.on('disconnect',()=>{
    io.emit('message','A user has disconnected')
  })


})


index.ejs before passport
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Slack-Clone</title>
    <script src="https://kit.fontawesome.com/deedf13270.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="/styles/style.css">
    <link rel="icon" type="image/png" href="/images/favicon.png">
</head>
<body>
<div class="container">
 
  <%- include('partials/channel', channels) -%>
  
  
</div>
</body>
</html>

channelDetails ejs
before passport

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://kit.fontawesome.com/deedf13270.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="/styles/style.css">
    <link rel="icon" type="image/png" href="/images/favicon.png">
</head>

<body>
    <div class="container">
        <%- include('partials/channel', channels) -%>
        <div id="slack-chat">
            <h1>
                <%=channel.channelName%>
            </h1>
            <h2>Chat and have fun!!!</h2>
            <div id="chat_messages">
                <% for(item of channel.conversation) { %>
                    <div>
                        <% if (item.userImage==='' || typeof(item.userImage==='undefined' ) ){%>
                            <i class="far fa-user"></i>
                        <%}%>
                        <h4 ><%=item.user %>  <span><%= item.timestamp %> </span> </h4>
                        <p><%= item.message %></p>
                    </div>
                        <% } %>
            </div>
            <form id="form">
                <input type="text" id="name" placeholder="Name">
                <input type="text" id="message" placeholder="Type your message here">
                <button>Send</button>
            </form>
        </div>
    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script src="/scripts/script.js"></script>
</body>

</html>

new channel_details in app.js 

/ // get form new channel
// app.get('/new/channel',(req,resp)=>{
//     resp.render('new_channel')
// })
// //post the new channel
// app.post('new/channel',(req,resp)=>{
//     const channelData=req.body
//     console.log(channelData)
// })






channelDetails
<div id="container">
        <%- include('partials/channel', channels) -%>
        <div id="slack-chat">
            <h1>
                <%=channel.channelName%>
            </h1>
            <h2>Chat and have fun!!!</h2>
            <div id="chat_messages">
                <% for(item of channel.conversation) { %>
                    <div>
                       
                        <h4 ><%=item.user %>  </h4>
                        <p>
                            <% let x= item.timeStamp.toLocaleTimeString() %>
                            <%= x %>
                        </p>
                        <p><%= item.message %></p>
                    </div>
                        <% } %>
            </div>
            <form id="form">
                <input type="text" id="name" value="<%=name%>" hidden> 
                <input type="text" id="channel" value="<%=channel.channelName%>" hidden> 
                <input type="text" id="message" placeholder="Type your message here">
                <button>Send</button>
            </form>
        </div>
    </div>
 
    
